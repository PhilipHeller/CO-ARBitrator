/*
 *    This program is free software; you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation; either version 2 of the License, or
 *    (at your option) any later version.
 *    
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *    
 */

/*
 *    ConserverDomainReportReader.java
 *    Copyright (C) 2018 Philip Heller
 *    
 */

package coarbitrator;

import java.io.*;
import java.sql.*;
import java.util.*;
import java.util.stream.Collectors;


//
// Builds ConservedDomain reports from tabular rpsblast/rpstblastn output, as generated by
//
// rpstblastn -query XXX.fa -db Cdd -outfmt "10 qseqid sseqid evalue" -num_alignments 10 -out XXX.csv
//
// Results files look like are csv. 1st field is the query, 2nd is the subject, 3rd is the e-value. Example:
/*
5469,gnl|CDD|213748,9e-45
5469,gnl|CDD|223913,9e-38
5469,gnl|CDD|238461,2e-35
5469,gnl|CDD|238833,6e-35
5469,gnl|CDD|238832,3e-33
5469,gnl|CDD|177235,2e-28
5469,gnl|CDD|177210,4e-28
5469,gnl|CDD|177260,6e-28
5469,gnl|CDD|177222,8e-28
5469,gnl|CDD|214451,3e-27
4259,gnl|CDD|213748,6e-40
4259,gnl|CDD|238833,7e-40
4259,gnl|CDD|238461,1e-38
4259,gnl|CDD|223913,6e-38
*/
// The 6-digit codes correspond to conserved domains.


public class ConserverDomainReportReader implements AutoCloseable
{
	private final static int			MAX_HITS_PER_QUERY	= 10;
	
	private ReversibleBufferedReader	rbr;
	private int							format;
	private boolean 					open;
	

	public ConserverDomainReportReader(ReversibleBufferedReader rbr)
	{
		this.rbr = rbr;
	}
	
	
	//
	// Don't assume increasing E-value order.
	//
	public ConservedDomainReport readReport() throws IOException
	{
		String line = rbr.readLine();
		if (line == null)
			return null;

		// Determine query.
		String[] pieces = line.split(",");
		String query = pieces[0];
		rbr.push(line);
		
		// Read lines while in hit block for this query.
		Map<String, Double> unsortedSubjToE = new HashMap<>();
		while ((line = rbr.readLine()) != null)
		{
			pieces = line.split(",");
			if (!pieces[0].equals(query))
			{
				rbr.push(line);
				break;
			}
			String subj = pieces[1].substring(pieces[1].lastIndexOf("|") +1);
			Double e = Double.valueOf(pieces[10]);
			unsortedSubjToE.put(subj, e);
		}
		
		// Sort into a report.
		ConservedDomainReport ret = new ConservedDomainReport(query);
		unsortedSubjToE.keySet()
			.stream()
			.sorted((s1, s2) -> (int)Math.signum(unsortedSubjToE.get(s1)-unsortedSubjToE.get(s2)))
			.forEach(subj -> ret.put(subj, unsortedSubjToE.get(subj)));
	
		return ret;
	}
	
	
	public void close()
	{
		open = false;
	}	
}
